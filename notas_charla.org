* CAP Theorem:
- Para qué quiero un sistema distribuido?
  - Para escalar horizontalmente en vez
    de verticalmente.
  - Vertical:
    - Agrandar servidor con más CPUs y RAM.
  - Horizontal:
    - Agregar más computadoras
  - Es más difícil escalar verticalmente Postgres,
    por ejemplo.
- CAP Theorem, en un contexto de nodos distribuidos,
  únicamente podemos asegurar 2 de estas propiedades a la vez,
  cuando hablamos de escribir/leer de distintos nodos.
- Consistencia:
  - Todos los nodos contienen la misma información,
    al actualizar uno se actualizan todos.
- Disponibilidad:
  - Un nodo no caído siempre devuelve una respuesta
    razonable sin error ni timeout,
    dentro de un periodo de tiempo razonable.
  - Puede ser dejarte leer algo inconsistente,
    o escribir algo inconsistente.
- Partition Tolerance:
  - El sistema funciona cuando ocurren
    particiones de red (se cae la red).
    Piensen cuántas veces anduvo mal
    Slack en todo lo que estuvieron en Lambda.
    Chiste: Se puede caer la red,
    alguien puede desenchufar algún cable
    ethernet, se cae el wifi...
    se cae US-East.
** Clarification.
- El teorema trata en términos absolutos,
  y se le escapan ciertos casos, lo
  menciono únicamente para guiarnos un poco
  y a qué apunta Riak.
- Por ejemplo, el mismo Riak tiene lo que
  se conoce como consistencia eventual.
- Postgres tiene un limite de (1000? conexiones por segundo)
** Simplifying:
- Entonces, la cuestión queda entre: Pierdo consistencia, o disponibilidad?. Si entra una request, espero a que
  pueda asegurarme de que todos los nodos estén de acuerdo,
  o
* Riak Core:
** What is it?
- Antes que nada, es un Framework de Erlang,
  está basado en las ideas del paper de dynamo
  de Amazon.
- Los ingenieros de Amazon, allá por 2004, se dieron
  cuenta de que ciertas operaciones, como usar el
  carrito de compra, no usaban todas las filas y
  columnas de sus bases SQL. Es más, devolvían
  información de más que no usaban.
- Este es un escenario en el cual varias ideas
  terminaron en Dynamo.
- Dynamo es NoSQL, A+P con consistencia eventual
  (implementación dependiente), fácilmente de escalar.
- En el caso de Riak, se escala agregando Nodos virtuales.
- Tunable AP system.
** Provee:
- Espacio fijo de claves.
- Con esto podemos hacer otras cosas como un time series,
  o un routing con nodos.
* What I've been doing:
** Tutorial:
-
** Issues:
- Estábamos usando algo así como OTP 21, y la
  actual es 25, de hace 4 años.
- OTP 21 y 22 ni siquiera funcionan en ARM, hasta
  donde vi. Para probar varias versiones
  fue útil usar docker como una terminal de Linux,
  con plataforma x86.
  Tiraban errores horribles de cómo no podían levantar la
  VM.
- Por qué estábamos usando un Fork?
  Cuando escribieron el tutorial Basho, la
  empresa detrás de Riak, estaba con temas
  financieros que ponían en duda su futuro.
  Con lo cual surgió un fork (Riak NG)
- rebar3 es el cargo/mix/brew de Erlang.
*** deprecated modules:
- peer vs slave. Para testear varios nodos,
  necesitábamos el módulo slave, que está
  siendo deprecado y reemplazado por peer.
** Solution:
- Quizás suene medio pavo, pero no tenía la costumbre
  de hacerlo hasta que me crucé con esto, y realmente
  en Erlang no hay otra opción.
